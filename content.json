[{"title":"学习嵌入式","date":"2017-11-27T13:23:00.000Z","path":"2017/11/27/零基础学习嵌入式/","text":"1、万事开头难、要勇敢迈出第一步。开始的时候，不要老是给自己找借口，说KEIL不会建项目啦、没有实验板啦之类的。遇到困难要一件件攻克，不会建项目，就先学它，这方面网上教程很多，随便找找看一下，做几次就懂了。然后可以参考别的人程序，抄过来也无所谓，写一个最简单的，让它运行起来，先培养一下自己的感觉，知道写程序是怎么一回事，无论写大程序还是小程序，要做的工序不会差多少，总得建个项目，再配置一下项目，然后建个程序，加入项目中，再写代码、编译、生成HEX，刷进单片机中、运行。必须熟悉这一套工序。个人认为，一块学习板还是必要的，写好程序在上面运行一下看结果，学习效果会好很多，仿真器就看个人需要了。单片机是注重理论和实践的，光看书不动手，是学不会的。 2、知识点用到才学，不用的暂时丢一边。 厚厚的一本书，看着人头都晕了，学了后面的，前面的估计也快忘光了，所以，最好结合实际程序，用到的时候才去看，不必说非要把书从第一页看起，看完它才来写程序。比如你写流水灯，完全就没必要看中断的知识，专心把流水灯学好就是了，这是把整本书化整为零，一小点一小点的啃。 3、程序不要光看不写，一定要自己写一次。 最开始的时候，啥都不懂，可以抄人家的程序过来，看看每一句是干什么用的，达到什么目的，运行后有什么后果，看明白了之后，就要自己写一次，你会发现，原来看明白别人的程序很容易，但到自己写的时候却一句也写不出来，这就是差距。。。当你自己能写出来的时候，说明你就真的懂了。。。 4、必须学会掌握调试程序的方法。 不少人写程序，把代码写好了，然后一运行，不是自己想要的结果，就晕了，然后跑到论坛上发个帖子，把程序一贴，问：为什么我的程序不能正常运行?然后就等别人来给自己分析。这是一种很不好的行为，应该自己学会发现问题和学会如何解决问题。这就需要学习调试程序的方法，比如KEIL里，可以下断点啦，查看寄存器内容等等，这些都是调试程序的手段，当你发现你写的程序运行结果和你想象中不一样的时候，你可以单步，也可以下断点，然后跟踪，查看各相关寄存器内容，看看程序运行过中是不是有什么偏差，找出影响结果的地方，改正过来。这一个过程非常重要，通过程序的排错，你可以学到的知识是书上得不到的。 5、找到解决问题思路比找到代码更重要。 我们用单片机来控制周边器件，达到我们想到的目的，这是一个题目，而如何写出一个程序，来控制器件按你想要的结果去运作，这个就是解题的思路。要写程序，就得先找到解决问题的思路，你学会找出这个解题思路，比你找到代码更为重要。不少人很喜欢找人家的代码，有的人甚至有了代码就直接复制到自己的程序中，可以说，这不是一种学习的态度，无助于你编程水平的提高。我几乎不怎么看人家的代码，多数时候是看别人的思路，有方框图最好，没有的话文字说明也可以，要从代码中看出别人处理问题的思路，是相当困难的，特别是大型的程序，看起来是非常的累人，所以现在我也明白了，以前读书时说的程序流程图很重要，现在算是知道了。当你知道一个问题怎么去解决了，那么剩下的只是你安排代码去完成，这就已经不是什么问题了。举个例子：数码管动态扫描，没写过的初学者可能搞不清是怎么回事，其实，就是分时让每一时间段时只控制一只数码管显示数字，几只数码管轮流显示，由于速度很快，人眼的看起来是全部数码管都亮的。明白是这么一回事，事情就好办了，剩下的事情，无非是你安排让一只只数码管轮流显示出相应的数值。显示数字，然后延时一下，再下一只显示数字，延时，知道是这样，我们实际程序上只要做到这样就可以：往段口送段码，然后打开位选显示一只，延时一下，再关闭位选，再送出段码，再打开另一只位选..仅此而已。有了解决问题的思路，我们就能问题拆分开来，然后逐一的解决，如果动态扫描的原理都没懂，不知道如何做，那么这个程序是怎么也写不出来的。 6、开动脑筋，运用多种方法，不断优化自己的程序。 想想用各种不同方法来实现同一功能。这是一个练习和提高的过程，一个问题，你解决了，那么你再想想，能不能换种写法，也可以实现同一功能，或者说，你写出来的代码，能不能再精简一点，让程序执行效率更高，这个过程，就是一个进步的过程。很多知识和经验的获得，并不是直接写在书让你看就可以得到的，需要自己去实践，开动脑筋，经验才能得到积累，编程水平才能有所提高。 7、看别人的代码，学习人家的思路。 这个在学习初期是很有用，通过看别人的代码，特别是有多年编程经验的人写出的具有一定水平的代码，可以使自己编程水平得到迅速的提高，同时，也可以结合别人的编程手法，与自己的想法融合在一起，写出更高水平的代码，从中得到进步。但要注意，切忌将学习变成抄袭，更不是抄袭完了就认为自己学会了，这样做只会使你退步。 8、尝试编写一下综合应用的程序。 从流水灯学起，到动态扫描，再到中断，那么，你可以试试写一下时钟这种综合性应用的程序，不要小看时钟，要写好它不是一件容易的事情，它包括了单片机大部分的知识，比如有按键(IO读取)、动态扫描(IO输出)、中断等，如何协调好各功能模块正常工作，才是编程者需要学习的地方，当你单独写一个功能的时候，比如按键读取，你可能感觉很容易，因为你的程序啥也不做，只是读按键。但把它和其它功能混合在一起，如何在整个程序运行中使每一部分都正常工作，这就不是写一个按键读取这么容易的事情，功能模块之间有可能会互相影响，比如你需要让数码管既能显示，又要去处理按键读取，怎么使这两部分都正常工作，这就是一个协调过程。当你有了这个处理协调能力，你就算是入门了。 9、着重于培养解决问题的能力，而不是具体看自己编写了多少代码或者做过什么。 “学单片机重点在于学习解决问题的思路，而不是局限于具体的芯片类型和语言”这一直是我的座右铭，是我学单片机多年来感悟出来的。经常看到有人说“你会驱动XX芯片，真牛啊”“你搞过XX项目，真厉害”之类的话，其实这是非常片面的，搞过XX芯片，搞过XX项目，只能说明你做过这一项目，它只是你的业绩，并不是代表能力就一定高。真正的能力应该是：“遇到没有解决过的问题或器件，能利用自己已学的知识，迅速找到解决问题的方法。”这个才是能力。写程序的过程就是一个创造的过程，几乎没有完全一样的项目，每次你遇上的几乎都不相同，所以你拥有的必须是你面对新项目时的创造能力，而不是标榜着你以往做过多少项目。当然，业绩也能从另一侧面反映你的经验和水平。 10、如果有可能，多学习计算机专业的知识，比如数据结构等。 这些是你解决问题的基础知识，你把这些知识应用得越好，就会发现越容易找到解决问题的方法，这就是为什么一个学计算机专业的人编的程序和一个非计算机专业的人编的程序有差异的原因。也是一个菜鸟进军到高手所要配备的知识。如果我们把编程分为宏观编程和微观编程，那么微观编程就是写具体的代码，比如控制某某器件的语句;而宏观编程就是如何对整个程序进行布局、安排，使功能模块以你想要的方式去运行，得出你想要的结果。如前所说“会控制XX器件”这些只能算是微观编程，能做到这一步还只能算是菜鸟级别，如果面对一个新的器件，你心里没底，没把握去写这个控制程序，那说明你还是一个初级的菜鸟。当你有了一定的编程经验，控制过相当数量的器件之后，你就会发现，控制器件这些工作都是相似的、重复的工作，体现不出编程的水平，最多也是写得好与不好的差别，只能算是一些小技巧的应用。而对整个程序进行布局、安排这些才是最头痛的事情，能达到宏观编程和微观编程都做好才是真正的高手。对于规模越大的程序，越能体现出这一点。 11、面对一个新项目时，多自己开动脑筋，不要急于找别人的程序。 有不少人面对一个新项目时，第一步想到的就是网上找别人写过的代码，然后抄一段，自己再写几句，凑在一起就完成任务，这虽然可能是省时间，但绝对不利你的学习。当你接到一个新项目时，应该先自己构思一下整个程序的架构，想想如何来完成，有可能的话，画一个流程图，简单的可以画在脑子里，对程序中用到的数据、变量有一个初步的安排，然后自己动手去写，遇到实在没办法解决的地方，再去请教别人，或看别人是怎么处理的，这样首先起码你自己动过脑想过，自己有自己的思路，如果你一开始就看别人的程序，你的思维就会受限在别人的思维里，自己想再创新就更难了，这样你自己永远也没办法提高，因为你是走在别人的影子里。有不少人面对一个新项目时，第一步想到的就是网上找别人写过的代码，然后抄一段，自己再写几句，凑在一起就完成任务，这虽然可能是省时间，但绝对不利你的学习。当你接到一个新项目时，应该先自己构思一下整个程序的架构，想想如何来完成，有可能的话，画一个流程图，简单的可以画在脑子里，对程序中用到的数据、变量有一个初步的安排，然后自己动手去写，遇到实在没办法解决的地方，再去请教别人，或看别人是怎么处理的，这样首先起码你自己动过脑想过，自己有自己的思路，如果你一开始就看别人的程序，你的思维就会受限在别人的思维里，自己想再创新就更难了，这样你自己永远也没办法提高，因为你是走在别人的影子里。 12、多利用网络的搜索，学会提问题。 一般来说，学习过程中，你遇上的问题，前人们多数也有遇上的，所以如果有什么不懂，在自己解决不了的时候，最好先到网上搜索一下，看能不能找到答案，找不到再到论坛里发问，发问也要有目的性，尽量简单明了的描述问题，让帮助你的人可以用最少的时间就看懂你说什么，毕竟人家帮助你是免费的，时间也是有限的。","tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://zf123.win/tags/嵌入式/"}]},{"title":"I2C模拟总结","date":"2017-03-15T01:22:25.000Z","path":"2017/03/15/I2C模拟总结/","text":"#纯IO模拟I2C从机设备硬件平台：义隆仿真–em78p173n 一般IO模拟有2种方法：中断或查询。这里用的是查询的方式。查询IO口状态变化，主机SCK速率不能超过30K。SDA 设置IO控制寄存器为输入模式 I2C协议中最重要的一点是I2C地址。这个地址有7位和10位两种形式。7位能够表示127个地址，而在实际使用中基本上不会挂载如此多的设置，所以很多设备的地址都采用7位，所以本文接下来的说明都是基于此。I2C还有一个很重要的概念，就是“主—从”。对于从设备来说，它是啥都不干的，更不会自动发送数据；而主设备，则是起到控制作用，一切都是从它开始。 先看I2C协议 接口结构 ： 加上拉电阻到正电源。连接到总线的器件其输出级必须是低有效的开漏或开集电极结构以实现“线与”功能，连接到总线上可被寻址的器件必须具有唯一地址。 总线空闲： 保持高电平 起始条件： 当SCL为高电平时，SDA的一个下降沿定义为启始条件（S）。所有信息传输必须以启始条件开始。所有接收到启始条件的器件必须复位它们的总线逻辑。停止条件：当SCL为高电平时，SDA的一个上升沿定义为停止条件（P）。所有信息传输必须以停止条件结束。所有接收到停止条件的器件必须复位它们的总线逻辑和接口状态，主器件在产生停止条件后将释放总线。 主器件 ： 产生启始条件和串行时钟信号的器件称为主器件（或主机）。启始条件、重复启始条件、停止条件、串行时钟信号只能由主机产生。 寻址 ： 主机使用地址查找目标器件的过程。 从器件： 被主机寻址的器件称为从器件（或从机）。主机可寻址一个或多个从机，被寻址的从机可参与或不参与数据传输。 字节格式： 发送到SDA线上的每个字节必须为8位，每个字节的最高位（MSB）先发送。每次传输可以发送的字节数量不受限制。 控制码 ： 由主机发送，用于寻址、配置或控制从机的信息称为控制码。根据总线模式的不同，控制码可有一个或多个“控制字节”。控制字节可按属性命名，如主机码、从机码、方向码，或者按字节次序分别命名，如第n个字节的控制码称为“第n控制码”。包含数据方向位的控制字节称为“方向码”，协议规定方向码的最低位（LSB）为数据方向位（R/W）。数据方向位的值取决于主机是发送还是接收数据。若是发送，则该位为W，表示向总线写数据，其值为0；若是接收，则该位为R，表示从总线读数据，其值为1。 应答信号 ： 发送到SDA线上的每个字节后面必须跟一个应答信号(1)。应答信号总是由接收当前字节的器件产生。一个应答信号占用一个时钟脉冲，在应答时钟脉冲高电平期间，发送字节的器件必须释放SDA线，而接收当前字节的器件应保持SDA线为稳定的电平——低电平表示“正态应答ACK”，高电平表示“反态应答NACK” 位传输： 每传输一位信息就产生一个时钟脉冲。SDA只能在时钟低电平期间改变状态，在时钟高电平期间必须保持稳定。每个时钟脉冲包含两个边沿，下降沿在前，上升沿在后。在位传输过程中，接口总是在时钟脉冲的下降沿写入SDA，而在时钟脉冲的上升沿读取SDA。I2C总线事件（如地址识别、中断产生）总是发生在时钟脉冲的下降沿。 数据有效性： I2C总线进行数据传送时，时钟信号为高电平期间，数据线上的数据必须保持稳定，只有在时钟线上的信号为低电平期间，数据线上的高电平或低电平状态才允许变化。 SCL是时钟，SDA承载的是数据。当SDA从1变动到0，而SCL还是1时，表示开始数据传输。接下来的7位，就是设备的地址。紧接着的是读写标志，其为1时是读取，为0则是写。如果I2C总线上存在着和请求的地址相对应的设备，则从设备会发送一个ACK信号通知主设备，可以发送数据了。接到ACK信号后，主设备则发送一个8位的数据。当传输完毕之后，SCL保持为1，SDA从0变换到1时，标明传输结束。 观看时序图总结一下几点： 时序图都是共用一个时钟信号，注意时钟信号在上下图中的对应。 时序图中有叉或者上升下降的如果是数据线的话表示数据有变化。菱形封闭的一段表示有效数据。 数据需要一段时间稳定，一般在数据变化后，时钟的上升沿或者下降沿读入数据或者写入数据。","tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"http://zf123.win/tags/嵌入式/"},{"name":"技术","slug":"技术","permalink":"http://zf123.win/tags/技术/"}]},{"title":"如何高效的学习","date":"2016-11-08T00:32:12.000Z","path":"2016/11/08/如何高效的学习/","text":"你连“高效学习”都不会，如何改变自己 转：2016-11-06 迎刃 LinkedIn 有一天，有个读者留言问：为什么看了你很多文章，也学习了其他资料书籍，花费很多时间，也很努力，却没有改变？ 碰到这样的问题，我其实已经见怪不怪了，然后熟练地输入一大堆反问： 你看完文章、资料、书籍后，有做笔记、总结吗？你花费的很多时间，具体有多少？你所谓的努力，努力到了什么程度？天天废寝忘食吗？你是否有根据文章资料里提到的方法，去实践过？实践的次数有多少？结果如何，是否有总结反馈和别人交流等等？ 过了一会，对方回复到：只是看，没怎么总结和实践，但我看花了很多时间。果然又是一个，自以为很努力，却是无效努力的骚年。然后又问对方，你多大？ 读者回：20岁，刚大三，我好怕，很多同学朋友都比我厉害，我怕再不努力就来不及了。总是这样努力没有结果，但又不想颓废，每次重新努力又坚持不了多久，就放弃了。 作为一个30多岁的大叔，我想对你说：你才20岁啊，为什么害怕来不及？究竟是哪里来不及呢？ 于是就有了这篇文章，来讲讲如何高效的努力学习，快速获得成长。以下方法都是我自己亲身经历过，所以感同身受，我相信，我能帮助你们改变。 1.学习成长的路径原理 人要想努力学习获得成果，首先需要了解，学习成长的路径原理是怎么样的。 很多人错以为自己的时间精力投入，可以换来直接的成果，以为努力与时间是成正比的。参考下图： 举例，我有个朋友是做服饰造型搭配的专家。帮助在非常缺乏审美的朋友，提升时尚感，让他们穿衣更有品味，外形更吸引人。刚开始他也做一些在线培训课程，教那些宅男们如何穿衣搭配。 但很多人有个狭隘的观念：以为穿衣打扮是件很容易的事情，只要自己看一遍理论方法，自己就可以搞定了。 实际上很多人学完后，自己尝试去搭配买衣服，穿出来的效果还是欠佳。于是就容易怪罪老师教得不好，学了没效果。 素不知，我那个专家朋友，为了能熟练的教别人，自己首先就花了几万元投资，去学习各种形象造型的高级课程，自己作为买手，买过的衣服估计也有几千套，以及平常关注大量的时尚杂志，节目等。同时，还有长达几年下来的咨询培训经验的积累。 他之所以能教人，就在于他在这方面不光投入了时间学习，他还有多项实践经验的累积，和不断的试错，矫正的过程。 而一般的学员，只看到了老师呈现出来的教学内容，却忽略了老师也是经历过大量的训练，才有现在的专业度。如果学员在学完理论后，没有进行大量实践，效果自然不明显。 学习成长曲线图，如下： 很多人都在“缓慢开始区”尝试了一小段时间，发现没什么变化就放弃了，于是又换了很多其他方法，也一样。无论他换任何方法技巧，即使所谓的速成的方法，都要经历这样的学习过程，才能发生改变。 他们不能看到马上努力后的效果，担心无法实现、白费力，索性就放弃了。心智不成熟的人，不懂得“推迟满足感”，他们想要的是“即时满足感”，也就是急功近利心态的表现。 然后有小部分的人，在进入到“加速提高区”，他们获得了一定的成果，但离非常牛逼的状态还有一段距离。极少数人，经历了非同寻常的磨练，或是更长时间的积累，才突破进入高原区。 我这里申明一下，这个原理就是我通过去学习别人的研究成果，以及结合自己的学习经历，得出的经验总结。 （以上的理论，引用自维基百科，李笑来、采铜等人的资料书籍文章。） 2.如何消除“我不会”的焦虑感 由于很多人不了解，我前面说的学习成长路径理论。他们想努力，却因为缺乏刻意训练，没有产生成果而感到失望，进而产生焦虑感。 焦虑是某种压力的体现。压力有阈值大小之分，未超过一定的临界点，就会形成动力，超过就会形成逃避。 这也就是为什么，有些人遇到压力能解决问题，有些人则不行，因为每个人的压力阈值点不一样，抗压力程度不一样。 压力过大有3个原因： 能力不匹配工作量大拖延习惯 这样会综合发生作用。 一个人一开始定了一个不切实际，超越自身能力的目标。比如有个粉丝说，我想通过天天写原创文章，来练习自己的写作能力。说实话天天写原创，并且言之有物，还能被别人认可，对一个新手来说是非常难的。 而一旦有一天没实现，就会出现累积崩溃，就会接连几天都提不起笔。最后这个事情就会不了了之。 所以，努力也请量力而行，定一个自己能承受一定压力的目标，循序渐进的完成，才能保证你的刻意练习能产生效果。 3.参考游戏模式，制造反馈机制 很多人为什么看一小时课本会感到很难受，精神涣散；而玩一小时游戏却精神抖擞，兴奋异常。 最大的区别就在于，看书不是一个可以让你马上产生收获和反馈的行为，而游戏则可以。因为游戏设计者就是通过让游戏更好玩，让你不停的接受信息和处理信息，让你大脑处于兴奋状态。 例如，酷炫华丽的招式，热血的背景音乐，以及你打怪升级过程中获得的金钱、经验、装备等收获，综合下来，就会让你乐于不停的游戏。 我们完全可以借鉴游戏的机制，运用在我们的学习中。 每学完一段时间，或一段内容，就给自己一个奖赏激励反馈，以及信息记录。 奖赏激励可以让你马上产生反馈和收获感、愉悦感、甚至多巴胺，借此来“欺骗”大脑，认为学习其实是件很开心的事情，人的本性是唯乐原则，开心就会激励你不断重复这件事。 而信息记录的好处，就是当你每次都做出的学习形成一个进度表格，每隔一段时间回顾总结。 例如一个月为测量单位，你就会发现，原来自己一个月下来竟然读了10本书，写了20篇文章，做过20份报告等等。 这样的记录，就类似与每次游戏过关的分数总结，也会容易让你形成，成就感，激励你不断做下去。 4.使用正确的方法，人人都有意志力 引用《自控力》: 有些专家认为，虽然人只有一个大脑，却有两个自我。一个自我任意妄为、及时行乐，另一个自我则克服冲动、深谋远虑。 我们总是在两者之间摇摆不定，有时觉得自己想减肥，有时觉得自己不吃个烧烤宵夜，就睡不着。 因此，我们可以这样来定义意志力的挑战——你一方面想要这个，一方面想要那个。两个自我发生分歧的时候，总会有一方击败另一方。决定放弃的一方并没有做错，只是双方觉得重要的东西不同而已。 那怎么提高意志力呢？每当冲动的你要击败自控的你时，就去想想什么事情可以延迟这个冲动。 例如： 你正在戒烟，但又有了抽烟的冲动，让自己有其他替代品；你如果下班时就换好了运动服，是不是就可以直接去健身房，而不是回家；你想要减肥，控制饮食，但你没有储备好，即好吃有饱腹，但又低热量的食物，就很容易因为饿了失控多吃了食物。 但还有一个简单提升意志力的方法。那就是冥想，5分钟即可。 在冥想训练中，目标就是专注呼吸。冥想不是让你什么都不想，而是让你不要太分心，不要忘了最初的目标。如果你在冥想时没法集中注意力，别担心。你只需多做练习，将注意力重新集中到呼吸上。 每当冥想结束，你就会感到精神变好，注意力也更集中，也更有控制力。","tags":[{"name":"学习","slug":"学习","permalink":"http://zf123.win/tags/学习/"}]},{"title":"英语学习","date":"2016-11-05T02:40:02.000Z","path":"2016/11/05/英语学习/","text":"賴世雄主講－如何學好英文态度： 1.善用零星时间 2.少就是多，慢就是快 3.持之以恒，永不放弃学习： 1.发音 2.会话：角色扮演 3.大量的阅、读","tags":[]},{"title":"hello","date":"2016-10-31T11:54:23.000Z","path":"2016/10/31/hello/","text":"","tags":[]}]